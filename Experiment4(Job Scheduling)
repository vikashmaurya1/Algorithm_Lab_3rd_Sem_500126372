#include <stdio.h>
#include <stdlib.h>
struct Job {
    int id;      
    int deadline;  
    int profit;    
};
int compare(const void *a, const void *b) {
    struct Job *jobA = (struct Job *)a;
    struct Job *jobB = (struct Job *)b;
    return (jobB->profit - jobA->profit);
}
int max(int a, int b) {
    return (a > b) ? a : b;
}
int min(int a, int b) {
    return (a < b) ? a : b;
}
void jobScheduling(struct Job jobs[], int n) {
    qsort(jobs, n, sizeof(struct Job), compare);
    int maxDeadline = 0;
    for (int i = 0; i < n; i++) {
        if (jobs[i].deadline > maxDeadline) {
            maxDeadline = jobs[i].deadline;
        }
    }
    int *timeSlot = (int *)malloc(maxDeadline * sizeof(int));
    for (int i = 0; i < maxDeadline; i++) {
        timeSlot[i] = -1; 
    }
    int totalProfit = 0; 
    int jobCount = 0;     

    for (int i = 0; i < n; i++) {
        for (int j = min(jobs[i].deadline, maxDeadline) - 1; j >= 0; j--) {
            if (timeSlot[j] == -1) { 
                timeSlot[j] = i;   
                totalProfit += jobs[i].profit;
                jobCount++;
                break;
            }
        }
    }

    printf("Scheduled jobs: ");
    for (int i = 0; i < maxDeadline; i++) {
        if (timeSlot[i] != -1) {
            printf("Job%d ", jobs[timeSlot[i]].id);
        }
    }
    printf("\nTotal Profit: %d\n", totalProfit);
    free(timeSlot);
}

int main() {
    int n;
    printf("Enter the number of jobs: ");
    scanf("%d", &n);

    struct Job jobs[n];
    printf("Enter Job ID, Deadline, and Profit for each job:\n");
    for (int i = 0; i < n; i++) {
        printf("Job %d: ", i + 1);
        scanf("%d %d %d", &jobs[i].id, &jobs[i].deadline, &jobs[i].profit);
    }

    jobScheduling(jobs, n);
    return 0;
}
